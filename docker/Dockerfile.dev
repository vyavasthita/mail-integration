FROM python:3.10-alpine3.18 as requirements-stage

WORKDIR /tmp

RUN pip install poetry

COPY pyproject.toml /tmp
COPY poetry.lock /tmp


RUN poetry export -f requirements.txt --only core --only test --output requirements.txt --without-hashes

FROM python:3.10-alpine3.18

RUN apk update \
    && apk add --virtual build-deps gcc python3-dev musl-dev \
    && apk add --no-cache mariadb-dev

WORKDIR /app

# set environment variables
# Prevents Python from writing pyc files to disc (equivalent to python -B option)
ENV PYTHONDONTWRITEBYTECODE 1

# Prevents Python from buffering stdout and stderr (equivalent to python -u option)
ENV PYTHONUNBUFFERED 1

EXPOSE 8181

ARG BUILD_ENV

ENV BUILD_ENV=${BUILD_ENV}

# Copy requirements from previous stage to docker container in /app 
COPY --from=requirements-stage /tmp/requirements.txt /app/requirements.txt

# Install the dependencies
RUN pip install --no-cache-dir --upgrade -r /app/requirements.txt
RUN pip install mysqlclient

COPY ./configuration/development/.env.app /app/configuration/development/.env.app
COPY ./configuration/development/.env.test /app/configuration/development/.env.test
COPY ./configuration/development/app_config.json /app/configuration/development/app_config.json
COPY ./configuration/development/email_rules.json /app/configuration/development/email_rules.json
COPY ./configuration/development/logging.conf /app/configuration/development/logging.conf

COPY ./src /app/src
COPY docker/entrypoint.sh .
COPY mail_helper.py .

# Copy files for unit tests
COPY ./tests /app/tests
COPY .coveragerc .
COPY pytest.ini .

RUN chmod +x ./entrypoint.sh

ENTRYPOINT ["sh", "entrypoint.sh"]

